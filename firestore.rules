rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Posts collection rules
    match /posts/{postId} {
      allow read: if true; // Anyone can read posts
      allow create: if isAuthenticated() 
        && request.resource.data.author.uid == request.auth.uid
        && request.resource.data.status == 'active'
        && request.resource.data.createdAt == request.time;
      allow update: if isAuthenticated() 
        && resource.data.author.uid == request.auth.uid
        && request.resource.data.author.uid == resource.data.author.uid
        && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isOwner(resource.data.author.uid);

      // Likes subcollection rules
      match /likes/{likeId} {
        allow read: if true;
        allow create: if isAuthenticated() 
          && request.resource.data.userId == request.auth.uid;
        allow delete: if isAuthenticated() 
          && resource.data.userId == request.auth.uid;
      }

      // Comments subcollection rules
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated()
          && request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated()
          && resource.data.userId == request.auth.uid
          && request.resource.data.userId == resource.data.userId;
        allow delete: if isAuthenticated()
          && resource.data.userId == request.auth.uid;
      }
    }
  }
} 