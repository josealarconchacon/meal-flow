rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthor(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidComment() {
      return request.resource.data.content is string &&
             request.resource.data.content.size() > 0 &&
             request.resource.data.content.size() <= 1000;
    }
    
    function isValidCommentReply() {
      return request.resource.data.content is string &&
             request.resource.data.content.size() > 0 &&
             request.resource.data.content.size() <= 500;
    }

    match /posts/{postId} {
      // Allow reading posts and their subcollections
      allow read: if true;
      
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() 
        && (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['stats', 'updatedAt']));
      allow delete: if isUserAuthor(resource.data.author.uid);
      
      // Comments rules
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && isValidComment();
        allow update: if isUserAuthor(resource.data.author.uid) && isValidComment();
        allow delete: if isUserAuthor(resource.data.author.uid);
        
        // Comment replies rules
        match /replies/{replyId} {
          allow read: if true;
          allow create: if isAuthenticated() && isValidCommentReply();
          allow update: if isUserAuthor(resource.data.author.uid) && isValidCommentReply();
          allow delete: if isUserAuthor(resource.data.author.uid);
        }
      }
      
      // Likes rules
      match /likes/{likeId} {
        allow read: if true;
        allow create, delete: if isAuthenticated();
      }
    }
  }
}
